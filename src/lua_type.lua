---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liugz.
--- DateTime: 2019/7/10 12:16
---
--函数 type 能够返回一个值或一个变量所属的类型。
print(type("hello world"))
print(type(print))
print(type(true))
print(type(360.00))
print(type(nil))

--nil（空）
--nil 是一种类型，Lua 将 nil 用于表示“无效值”。一个变量在第一次赋值前的默认值是 nil，将 nil 赋予给一个全局变量就等同于删除它。
local num
print(num)
num = 100
print(num)
--值得一提的是，OpenResty 的 Lua 接口还提供了一种特殊的空值，即 ngx.null，用来表示不同于 nil 的“空值”。后面在讨论 OpenResty 的 Redis 库的时候，我们还会遇到它。

--boolean（布尔）
--布尔类型，可选值 true/false；Lua 中 nil 和 false 为“假”，其它所有值均为“真”。比如 0 和空字符串就是“真”；C 或者 Perl 程序员或许会对此感到惊讶。

local a = true
local b = 0
local c = nil
if a then
    print("a")
else
    print("not a")
end

if b then
    print("b")
else
    print("not b")
end

if c then
    print("c")
else
    print("not c")
end

--number（数字）
--Number 类型用于表示实数，和 C/C++ 里面的 double 类型很类似。可以使用数学函数 math.floor（向下取整）和 math.ceil（向上取整）进行取整操作。
local order = 3.99
local score = 98.01
print(math.floor(order))
print(math.ceil(score))
--一般地，Lua 的 number 类型就是用双精度浮点数来实现的。值得一提的是，LuaJIT 支持所谓的“dual-number”（双数）模式，即 LuaJIT 会根据上下文用整型来存储整数，而用双精度浮点数来存放浮点数。
--另外，LuaJIT 还支持“长长整型”的大整数（在 x86_64 体系结构上则是 64 位整数）。例如

--print(9223372036854775807LL - 1)  -->output:9223372036854775806LL

local str1 = "abc"
local str2 = 'abc'
local str3 = [["add\name",'hello']]
local str4 = [==[string have a [[]].]==]
local str5 = [=[string have a [[]].]=]

print(str1)
print(str2)
print(str3)
print(str4)
print(str5)

local corp = {
    web = "www.google.com", --索引为字符串，key = "web",
    --            value = "www.google.com"
    telephone = "12345678", --索引为字符串
    staff = { "Jack", "Scott", "Gary" }, --索引为字符串，值也是一个表
    100876, --相当于 [1] = 100876，此时索引为数字
    --      key = 1, value = 100876
    100191, --相当于 [2] = 100191，此时索引为数字
    [10] = 360, --直接把数字索引给出
    ["city"] = "Beijing" --索引为字符串
}

print(corp.web)
print(corp.telephone)
print(corp.staff)
print(corp[0])
print(corp[1])
print(corp[2])
print(corp[10])
print(corp.city)

local function foo()
    print("in the function")
    --dosomething()
    local x = 10
    local y = 20
    return x + y
end

local a = foo  --把函数赋给变量

print(a())
